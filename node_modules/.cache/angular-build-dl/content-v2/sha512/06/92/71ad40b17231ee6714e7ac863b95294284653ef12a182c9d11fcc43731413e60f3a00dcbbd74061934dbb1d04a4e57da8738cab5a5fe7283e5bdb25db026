{"version":3,"sources":["webpack:///src/app/page/register/register.page.html","webpack:///src/app/page/register/register-routing.module.ts","webpack:///src/app/page/register/register.module.ts","webpack:///src/app/page/register/register.page.scss","webpack:///src/app/page/register/register.page.ts"],"names":["routes","path","component","RegisterPageRoutingModule","imports","forChild","exports","RegisterPageModule","declarations","RegisterPage","navCtrl","authService","formBuilder","firestore","errorMessage","successMessage","validation_messages","type","message","validations_form","group","name","compose","required","minLength","email","pattern","dob","password","address","mobile","e","date","Date","target","value","toISOString","substring","get","setValue","onlyself","registerUser","then","res","console","log","err","navigateBack","selector","template"],"mappings":"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","file":"page-register-register-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color = \\\"tertiary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button defaultHref=\\\"/login\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>REGISTER HERE</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n\\n<ion-content>\\n\\n\\n  <ion-card>\\n    <ion-item style=\\\"text-align: center\\\">\\n      <div style=\\\"text-align: center\\\">\\n      <ion-avatar class=\\\"avatars\\\" >\\n        <img src=\\\"../../assets/img/av.jpg\\\">\\n      </ion-avatar>\\n      </div>\\n</ion-item>\\n  </ion-card>\\n\\n\\n  <form class=\\\"form\\\" [formGroup]=\\\"validations_form\\\" (ngSubmit)=\\\"tryRegister(validations_form.value)\\\">\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">Usernames</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"name\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.name\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"validations_form.get('name').hasError(validation.type) && (validations_form.get('name').dirty || validations_form.get('name').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">Email</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"email\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"validations_form.get('email').hasError(validation.type) && (validations_form.get('email').dirty || validations_form.get('email').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\" icon=\\\"calendar\\\">DOB</ion-label>\\n      <ion-datetime (ionChange)=\\\"getDate($event)\\\" formControlName=\\\"dob\\\" [value]=\\\"defaultDate\\\"></ion-datetime>\\n    </ion-item>\\n\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">Address</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"address\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.address\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"validations_form.get('address').hasError(validation.type) && (validations_form.get('address').dirty || validations_form.get('address').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\" >Password</ion-label>\\n      <ion-input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-controll\\\" required></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"validations_form.get('password').hasError(validation.type) && (validations_form.get('password').dirty || validations_form.get('password').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n      </ng-container>\\n    </div>\\n\\n    \\n    <ion-item>\\n      <ion-label position=\\\"stacked\\\">Gender</ion-label>\\n      <ion-select placeholder=\\\"Select One\\\">\\n        <ion-select-option value=\\\"f\\\">Female</ion-select-option>\\n        <ion-select-option value=\\\"m\\\">Male</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n\\n    <ion-item>\\n      <ion-label position=\\\"floating\\\">Mobile</ion-label>\\n      <ion-input type=\\\"text\\\" formControlName=\\\"mobile\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"validation-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.mobile\\\">\\n        <div class=\\\"error-message\\\"\\n          *ngIf=\\\"validations_form.get('mobile').hasError(validation.type) && (validations_form.get('mobile').dirty || validations_form.get('mobile').touched)\\\">\\n          {{ validation.message }}\\n        </div>\\n\\n      </ng-container>\\n    </div>\\n\\n    <label class=\\\"error-message\\\">{{errorMessage}}</label>\\n    <label class=\\\"success-message\\\">{{successMessage}}</label>\\n  \\n\\n    <!-- Checkboxes -->\\n    <ion-list lines=\\\"full\\\">\\n      <ion-list-header>\\n        <ion-label icon=\\\"checkmark\\\">Checks</ion-label>\\n      </ion-list-header>\\n      <ion-item>\\n        <ion-label>Over 18 years?</ion-label>\\n        <ion-checkbox></ion-checkbox>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label>Around Pretoria?</ion-label>\\n        <ion-checkbox></ion-checkbox>\\n      </ion-item>\\n      <ion-item>\\n        <ion-label>No respiratory issues?</ion-label>\\n        <ion-checkbox></ion-checkbox>\\n      </ion-item>\\n    </ion-list>\\n\\n    <div class=\\\"boxContainer\\\">\\n      <div class=\\\"box\\\">\\n        <p>By creating an account you agree to our <a href=\\\"#\\\">Terms & Privacy</a>.</p>\\n      </div>\\n        <ion-button expand= \\\"full\\\" size=\\\"large\\\" shape =\\\"round\\\" class= \\\"submit\\\" (click)=\\\"goLoginPage()\\\">Register</ion-button>\\n      <p>Already have an account? <a href=\\\"#\\\">Login</a>.</p>\\n\\n    </div>\\n  </form>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\nimport { RegisterPage } from './register.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule, ReactiveFormsModule,\n    RegisterPageRoutingModule\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2UvcmVnaXN0ZXIvcmVnaXN0ZXIucGFnZS5zY3NzIn0= */\";","// register.page.ts\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { AuthenticateService } from './../../service/authenticate.service';\nimport { NavController } from '@ionic/angular';\nimport { AngularFirestore } from '@angular/fire/firestore';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n\n\n  validations_form: FormGroup;\n  errorMessage: string = '';\n  successMessage: string = '';\n\n  validation_messages = {\n    'name': [\n      { type: 'required', message: 'Usernames are required.' },\n      { type: 'pattern', message: 'Enter valid names.' }\n    ],\n    'email': [\n      { type: 'required', message: 'Email is required.' },\n      { type: 'pattern', message: 'Enter a valid email.' }\n    ],\n    'dob':[\n      {type: 'required', message: 'Date Of Birth is required'}\n    ],\n    'address': [\n      { type: 'required', message: 'Address is required.' },\n      { type: 'pattern', message: 'Enter a valid home address.' }\n    ],\n\n    'password': [\n      { type: 'required', message: 'Password is required.' },\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' }\n    ],\n    'mobile': [\n      { type: 'required', message: 'Mobile number is required.' },\n      { type: 'pattern', message: 'Enter valid numbers.' }\n    ]\n  };\n\n  constructor(\n    private navCtrl: NavController,\n    private authService: AuthenticateService,\n    private formBuilder: FormBuilder,\n    private firestore: AngularFirestore,\n\n  ) { }\n\n  ngOnInit() {\n    this.validations_form = this.formBuilder.group({\n      name: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(2)\n      ])),\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n        dob: [''],\n      \n      password: new FormControl('', Validators.compose([\n        Validators.minLength(5),\n        Validators.required\n      ])),\n      address:[''],\n      \n\t  mobile: ['', [Validators.required, Validators.pattern('^[0-9]+$')]]\n\n    });\n  }\ngetDate(e) {\n      let date = new Date(e.target.value).toISOString().substring(0, 10);\n      this.validations_form.get('dob').setValue(date, {\n        onlyself: true\n      })\n    }\n\t\n  tryRegister(value) {\n    this.authService.registerUser(value)\n      .then(res => {\n        console.log(res);\n        this.errorMessage = \"\";\n        this.successMessage = \"Your account has been created. Please log in.\";\n      }, err => {\n        console.log(err);\n        this.errorMessage = err.message;\n        this.successMessage = \"\";\n      })\n  }\n\n  goLoginPage() {\n    this.navCtrl.navigateBack('');\n  }\n\n\n}\n"]}